{
	"examples": [
		{
			"title": "Connection",
			"sort": 0,
			"children": [
				{
					"title": "Login",
					"description": "As a first step, we are learning to connect to an immudb running server. Immudb is immediatly ready to use with a default database out of the box, a default user and a default password. The database is called \"defaultdb\", while the default user is called \"immudb\" with password \"immudb\".<br /><br />In this example we import the client class from immudb-py package, we establish a connection with the database and then login with default credentials.",
					"fileName": "login",
					"sort": 0
				}
			]
		},
		{
			"title": "Basic operations",
			"sort": 1,
			"children": [
				{
					"title": "Hello world",
					"description": "In this example, we start actually using immudb. Immudb at its core is a key value store, so the first operation we will learn is to store, and then read back, a key/value pair. Data is stored in immudb as binary string, so regular python string must be encoded before writing, and decoded after reading.",
					"documentation": "https://docs.immudb.io/master/sdks-api.html#writing-and-reading",
					"fileName": "hello_world",
					"sort": 0
				},
				{
					"title": "Safe operations",
					"description": "There are many stores out there that can handle key/values. What makes immudb unique is that it stores values immutably.<br /><br />Once a key/value pair is stored, you have cryptographic proof that that value, in that transaction, is not going to be tampered. Nobody can change the value stored and be undetected. To show this, we will use the <span class=\"font-weight-black\">verified</span> versions of the get and set functions we just encoutered.<br /><br />A <span class=\"font-weight-bold\">verifiedSet</span> stores a values in the database, while checking for the mathematical consistency with the previous database state, while a <span class=\"font-weight-bold\">verifiedGet</span> fetches a value from the database, checking that the value we get is mathematically consistent with the database state.",
					"documentation": "https://docs.immudb.io/master/sdks-api.html#tamperproof-reading-and-writing",
					"fileName": "safe_operations",
					"sort": 1
				},
				{
					"title": "Money",
					"description": "In this example you will see a basic abstraction of a money transfer data storing using immudb",
					"fileName": "money",
					"sort": 2
				},
				{
					"title": "Producer",
					"description": "In this example you will learn produce some data that will be consumed later",
					"fileName": "producer",
					"sort": 3
				},
				{
					"title": "Consumer",
					"description": "In this example you will learn to read back data from immudb producer",
					"fileName": "consumer",
					"sort": 4
				}
			]
		}
	]
}